//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeChecker<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	//  Toggle debug mode
	boolean debug = false;
	
	boolean first_pass_done = false;
	
	HashMap<String, HashSet<String>> vars_in_scope = new HashMap<String, HashSet<String>>();
	
	HashMap<String, String> fnparamhm = new HashMap<String, String>();
	Stack<String> scope_stack = new Stack<String>();
	
	HashMap<String, String> vars_type  = new HashMap<String, String>();
	HashMap<String, String> classextd  = new HashMap<String, String>();
	
	// Identifiers can be type (Object of a class)
	// In that case, we need to check whether it actually exists
	int IdAsaType = 0;
	String list = "";
	   
	String mclass;
	
	
	
	   
	public void error(){
		System.out.println("Type error");
		System.exit(0);
	}
	
	public void error2() {
		System.out.println("Symbol not found");
		System.exit(0);
	}
	   
	public void error(String e){
		if(debug){
			System.out.println("Type error: " + e);
		}
		else{
			System.out.println("Type error");
		}
		System.exit(0);
	}
	
	public void error2(String e){
		if(debug){
			System.out.println("Symbol not found: " + e);
		}
		else{
			System.out.println("Symbol not found");
		}
		System.exit(0);
	}
	
	
	
	
	
	public void check_loop(){
		for(String s : classextd.keySet()){
			if(check_class_loop(s) == true)
				error("Class loop"+s);
		}
	}
	   
	private boolean check_class_loop(String c){
		String t;
		t = new String(c);
		HashSet<String> s = new HashSet<String>(); 
		while(true){
			s.add(t);
			if(classextd.containsKey(t))
				t = classextd.get(t);
			else
				return false;
			  
			if(s.contains(t))
				return true;
		}
	}
	
	
	

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
            
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }
   
   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
	   beginScope("");
	   
	   if (first_pass_done)
		   check_loop();
		   
	   
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      scope_stack.pop();
      first_pass_done = true;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
	   
	   if (!first_pass_done) {
		   mclass = n.f1.f0.tokenImage;
		   addVar(mclass, "class");
	   }
	   
	   beginScope(mclass);
	   
	   if (!first_pass_done)
		   addVar("main()", "void");
	   
	   beginScope("main()");
	   
	   if (!first_pass_done) {
		   addVar(n.f11.f0.tokenImage, "String[]");
		   fnparamhm.put(full_scope(), "String[]");
	   }
	   
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      
      scope_stack.pop();
      scope_stack.pop();
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
	   if (!first_pass_done) {
		   addVar(n.f1.f0.tokenImage, "class");
		   if (mclass.equals(n.f1.f0.tokenImage))
			   error("Same as main class"+n.f1.f0.tokenImage);
	   }
	   
	  beginScope(n.f1.f0.tokenImage);
	   
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      scope_stack.pop();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
	   if(!first_pass_done){
		   addVar(n.f1.f0.tokenImage, "class");	
		   classextd.put(n.f1.f0.tokenImage, n.f3.f0.tokenImage);
	   }
	   else{
		   if(!vars_in_scope.get(":").contains(n.f3.f0.tokenImage)){
			   error2("Parent class doesn't exist:"+n.f3.f0.tokenImage);
	       }
	   }

	   beginScope(n.f1.f0.tokenImage);
	      
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      
      scope_stack.pop();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if (!first_pass_done)
    	  addVar(n.f1.f0.tokenImage, type);
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String mtype = (String) n.f1.accept(this, argu);
      String fn_name = n.f2.f0.tokenImage+"()";
      
      if (!first_pass_done) {
    	  addVar(fn_name, mtype);
      }
      
      beginScope(fn_name);
      
      
//      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      // Store list of arguments to the method
      if (!first_pass_done) {
    	  fnparamhm.put(full_scope(), list);
      }
      list = new String();
      list = "";
      
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String exp_type = (String) n.f10.accept(this, argu);
      
      if (first_pass_done) {
    	  if (!isequal(mtype, exp_type)) {
    		  error("Method Type and ret don't match" + mtype + "," + exp_type);
    	  }
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      
      scope_stack.pop();
      
      if (first_pass_done) {
    	  // Check function overloading with parent class
    	  
    	  if (classextd.containsKey(scope_stack.get(1))) {
    		  String pclass = classextd.get(scope_stack.get(1));
    		  
    		  // Check if function exists in parent class
    		  String fn_class = fromScopeGetTypeorClass(fn_name, "::"+pclass, false);
    		  
    		  // If exists
    	      if(!fn_class.equals("")){
    	    	  // Get function parameters in base class
    	          String fn_params = fnparamhm.get(fn_class + ":" + fn_name);

    	          // If argument mismatch, error()
    	          if(!fn_params.equals(fnparamhm.get(full_scope() + ":" + fn_name))) {
    	        	  error("Argument mismatch:"+fn_params+", "+
    	        			  fnparamhm.get(full_scope() + ":" + fn_name));
    	          }
    	      }
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      
      if (!first_pass_done) {
    	  // Add to variables
    	  addVar(n.f1.f0.tokenImage, type);
      }
      list = list + type;
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      list = list + ",";
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
//      R _ret=null;
      IdAsaType = 1;
      String type = (String) n.f0.accept(this, argu);
      IdAsaType = 0;
      return (R)type;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      String _ret="int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      String _ret="boolean";
      n.f0.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      String _ret="int";
      n.f0.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id_type = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp_type = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      if (first_pass_done) {
    	  if (!isequal(id_type, exp_type))
    		  error("Assignment err"+id_type+","+exp_type);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String var = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String index = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String val = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      if (first_pass_done) {
    	  if (var != "int[]")
    		  error("Array Assignment err1:"+var+","+val);
    	  if (index != "int")
    		  error("Array Assignment err2:"+var+","+val);
    	  if (var == "int[]" && val != "int") {
    		  error("Array Assignment err3:"+var+","+val);
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String) n.f2.accept(this, argu);
      if (first_pass_done) {
    	  if (type != "boolean")
    		  error("If then error:"+type);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String)n.f2.accept(this, argu);
      if (first_pass_done) {
    	  if (type != "boolean") {
    		  error("If then else err:"+type);
    	  }
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String)n.f2.accept(this, argu);
      if (first_pass_done) {
    	  if (type != "boolean")
    		  error("While err:"+type);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp_type = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if (first_pass_done) {
    	  if (exp_type != "int") {
    		  error("Print err:"+exp_type);
    	  }  
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      
      if (first_pass_done) {
    	  if (exp1 != "boolean" || exp2 != "boolean")
    		  error("And err: "+exp1+","+exp2);
    	  _ret = (R) "boolean";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
public R visit(OrExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      
      if (first_pass_done) {
    	  if (exp1 != "boolean" || exp2 != "boolean")
    		  error("Or err: "+exp1+","+exp2);
    	  _ret = (R) "boolean";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      
      if (first_pass_done) {
    	  if (exp1 != "int" || exp2 != "int")
    		  error();
    	  _ret = (R) "boolean";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      
      if(first_pass_done){
    	  if (!exp1.equals(exp2))
    		  error();
      	  
      	  _ret = (R)"boolean";    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {      
      String _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      
      if (first_pass_done) {
    	  if (!exp1.equals("int") || !exp2.equals("int"))
    		  error();
    	  _ret = "int";
      }
      return (R)_ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      
      if (first_pass_done) {
    	  if (!exp1.equals("int") || !exp2.equals("int"))
    		  error();
    	  _ret = (R) "int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      
      if (first_pass_done) {
    	  if (!exp1.equals("int") || !exp2.equals("int"))
    		  error();
    	  _ret = (R) "int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {   
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      
      if (first_pass_done) {
    	  if (!exp1.equals("int") || !exp2.equals("int"))
    		  error();
    	  _ret = (R) "int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      if (first_pass_done) {
    	  if (!exp1.equals("int[]"))
    		  error("Array lookup1:"+exp1);
    	  
    	  if (!exp2.equals("int"))
    		  error("Array lookup2:"+exp2);
    	  
    	  _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String exp_type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if (first_pass_done) {
    	  if (!exp_type.equals("int[]"))
    		  error();
    	  _ret = (R) "int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      String _ret=null;
      
      String cname = (String) n.f0.accept(this, argu);
      String fn_name = n.f2.f0.tokenImage+"()";
      if(first_pass_done){
    	  //Check if class exists 
    	  if(vars_in_scope.get(":").contains(cname) == false)
    		  error("at message send1:" + cname);
    	  
    	  //Check if fn exists and get return type if it does    	  
    	  _ret = fromScopeGetTypeorClass(fn_name, "::"+cname, true);
    	  if(_ret == ""){
    		  error("at message send2");
        }
      }
//      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String etype = (String) n.f4.accept(this, argu);
      
      if(first_pass_done){
    	  //Check if expression list type matches    	  
    	  String real_class_name = fromScopeGetTypeorClass(fn_name, "::"+cname, false);
    	  if(real_class_name == "")
              error("Class not found in scope in Msgsend:"+cname);
          if(etype == null)
    		  etype = "";
    	  
    	  String[] params = fnparamhm.get(real_class_name + ":" + fn_name).split(",");
    	  String[] expr_params = etype.split(",");
    	  
    	  if(params.length != expr_params.length)
    		  error("unequal no. of args:" + etype);
    	  
    	  for(int i=0; i< params.length; i++ ) {
    		  if(!isequal(params[i], expr_params[i])){
    			  error("at message send3, diff arg type:"+params[i]+","+expr_params[i]);
    		  }
    	  }
      }
      n.f5.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      list = list + type;
      n.f1.accept(this, argu);
      _ret = (R)list;
      list = new String();
      list = "";
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      list = list + ",";
      list = list + n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
//      String _ret= "int";
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=(R) "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret= (R) "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      // This is applicable when we're trying to make an object of a class
      if(IdAsaType == 1){
    	  if(first_pass_done){
    		  if(!vars_in_scope.get(":").contains(n.f0.tokenImage))
    			  error2("Identifier as class type not found:"+n.f0.tokenImage);
              if(mclass.equals(n.f0.tokenImage))
                  error("Main class Identifier name match:"+n.f0.tokenImage);
          }
    	  return (R) n.f0.tokenImage;
      }
      
      if(first_pass_done){
          String s = getType(n.f0.tokenImage);
          if(s == "")
        	  error2(n.f0.tokenImage);
          _ret = (R) s;
      }
      
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
//      R _ret=null;
      String _ret = scope_stack.get(1);
      n.f0.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exp_type = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if (first_pass_done) {
    	  if (exp_type !="int")
    		  error("Array allocation err:"+exp_type);
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret= (R) n.f1.f0.tokenImage;
      n.f0.accept(this, argu);
      String s = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      if (first_pass_done) {
    	  if (s!= "class")
    		  error("Allocation err: "+s+","+n.f1.f0.tokenImage);
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = (String)n.f1.accept(this, argu);
      
      if (first_pass_done) {
    	  if (s != "boolean")
    		  error("Not err:"+s);
    	  _ret = (R)"boolean";
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }
   
   // Useless grammar - doesn't reach here

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }
   
   
   
   
   
   public String full_scope(){
	   String full_name="";
	   String a="";
	   for(int i=0; i<scope_stack.size(); i++){
	         a=scope_stack.elementAt(i);
	         full_name = full_name + ":" + a;
	   }
	   return full_name; 
	}
	   
	
	
	public void beginScope(String s){
		scope_stack.add(s);
		String scope = full_scope(); 
		if(vars_in_scope.containsKey(scope) == false){
			HashSet<String> set = new HashSet<String>();
			vars_in_scope.put(scope, set);
		}
	}
	  
	
	
	public void addVar(String id, String type){
		String curr_scope = full_scope();
		   
		if(vars_in_scope.get(curr_scope).contains(id) == true)
			error();

		vars_in_scope.get(curr_scope).add(id);
		vars_type.put(curr_scope + ":" + id, type);
	}
	  
	

	
	public String fromScopeGetTypeorClass(String id, String scope, boolean isType){
		while(true){
			if((vars_in_scope.get(scope)).contains(id)) {
				if (isType)
					return vars_type.get(scope+":"+id);
				else
					return scope;
			}

			String scope_name = scope.substring(scope.lastIndexOf(':')+1); 
			if(classextd.containsKey(scope_name) == false)
				return "";

			scope = "::" + classextd.get(scope_name);
		}
	}
	  
	
	
	public String getType(String id){
		String a="";
		String curr_scope = "";
		for(int i = 0; i<scope_stack.size(); i++){
			a=scope_stack.elementAt(i);
			curr_scope = curr_scope + ":" + a;
			String s = fromScopeGetTypeorClass(id, curr_scope, true);
			if(s!="")
				return s;
		}
		error();
		return "";
	}
	
	
	// Baap of all equals   
	public boolean isequal(String parent_class, String child_class){
		while(true){
			if(parent_class.equals(child_class))
				return true;
			   
			if(classextd.containsKey(child_class))
				child_class = classextd.get(child_class);
			else
				return false;
		}
	}

}
