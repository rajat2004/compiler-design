//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class microIR_gen<R,A> extends GJDepthFirst<R,A> {
	int temp_cnt = 1000;
	
	boolean debug = true;
	boolean in_mthd = false;
	boolean push_exp = false;
	
	Queue<String> tmp_exp = new LinkedList<String>();
	
	String newTemp() {
		temp_cnt++;
		return " TEMP " + Integer.toString(temp_cnt) + " ";
	}
	
	void print(String s) {
		if (debug)
			System.out.println(s);
	}
	
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      in_mthd = true;
      n.f3.accept(this, argu);
      in_mthd = false;
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
	   print("StmtList start: ");
      R _ret=null;
      n.f0.accept(this, (A)("print"));
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
	   System.out.println("\n");
      R _ret=null;
//      n.f0.accept(this, argu);
     
      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(n.f0.f0.tokenImage + " [ " + n.f2.f0.tokenImage + " ] ");
      in_mthd = true;
      n.f4.accept(this, argu);
      in_mthd = false;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" ERROR ");
//      return _ret;
      return (R) "";
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ex = (String) n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      System.out.println(" CJUMP " + ex + " " + n.f2.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      System.out.println(" JUMP ");
//      n.f1.accept(this, argu);
      System.out.println(" JUMP " + n.f1.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ex1 = (String) n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      String ex2 = (String) n.f3.accept(this, argu);
      String exp2_tmp = newTemp();
//      System.out.println("YEs, this shit");
      System.out.println("MOVE " + exp2_tmp + ex2);
      System.out.println(" HSTORE " + ex1 + " " + n.f2.f0.tokenImage + " " + exp2_tmp );
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tmp = (String) n.f1.accept(this, argu);
      String ex = (String) n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      System.out.println(" HLOAD " + tmp + ex + " " + n.f3.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tmp = (String) n.f1.accept(this, argu);
      String ex = (String) n.f2.accept(this, argu);
      System.out.println(" MOVE " + tmp + ex);
//      return _ret;
      return (R) tmp;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ex = (String) n.f1.accept(this, argu);
      System.out.println("PRINT " + ex);
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
//      if (push_exp) {
//    	  print("CALL exp debug: " + (String)_ret);
////    	  System.out.println(_ret);
//    	  tmp_exp.add((String)_ret);
//      }
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      boolean tmpFlag = in_mthd;
      in_mthd = false;
      
      if (tmpFlag) {
//    	  _ret = " BEGIN ";
    	  System.out.println(" BEGIN ");
//    	  in_mthd = false;
//    	  _ret += (String) n.f1.accept(this, argu);
    	  n.f1.accept(this, null);
    	  print("Before RETURN, Before f3");
    	  String ex = (String) n.f3.accept(this, null);
    	  print("Before return, after f3: " + _ret);
    	  _ret = " RETURN " + ex + " END ";
    	  System.out.println(_ret);
//    	  in_mthd = true;
    	  in_mthd = tmpFlag;
      }
      else {
    	  _ret = (String) n.f1.accept(this, null);
//    	  String ex = (String) n.f3.accept(this, argu);
    	  String exp = (String) n.f3.accept(this, null);
//    	  _ret +=
    	  in_mthd = tmpFlag;
    	  return (R) exp;
      }
      
      return (R) _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      String _ret=" CALL ";
      n.f0.accept(this, argu);
      _ret += (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret += " ( ";
//      push_exp = true;
//      _ret += (String) n.f3.accept(this, argu);
      n.f3.accept(this, (A) "push");
//      push_exp = false;
      
      print("Call Exp list expand: " +  Integer.toString(n.f3.nodes.size()) );
      print(tmp_exp.toString());
      for (int i=0; i<n.f3.nodes.size(); ++i) {
    	  _ret += tmp_exp.remove();
      }
      
      _ret += " ) ";
      n.f4.accept(this, argu);
      String tmp = newTemp();
      System.out.println(" MOVE" + tmp + _ret);
      return (R) tmp;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
	   print("Hallocate start");
      String _ret=null;
      n.f0.accept(this, argu);
      String ex = (String) n.f1.accept(this, null);
//      _ret = " HALLOCATE " + ex_tmp;
      String tmp = newTemp();
      System.out.println(" MOVE " + tmp + "HALLOCATE " + ex);
      return (R) tmp;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      String op = (String) n.f0.accept(this, argu);
      
      boolean tmp_pushExp = push_exp;
      push_exp = false;
      String ex1 = (String) n.f1.accept(this, null);
      String ex2 = (String) n.f2.accept(this, null);
      
      
      String _ret = newTemp();
      System.out.println(" MOVE " + _ret + op + ex1 + ex2);
      if (argu != null && (String)argu=="push") {
    	  print("CALL exp debug: " + (String)_ret);
//    	  System.out.println(_ret);
    	  tmp_exp.add((String)_ret);
    	  push_exp = tmp_pushExp;
      }
      return (R) _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      n.f0.accept(this, argu);
      String s = "";
      switch (n.f0.which) {
      case 0: s = " LE "; break;
      case 1: s = " NE "; break;
      case 2: s = " PLUS "; break;
      case 3: s = " MINUS "; break;
      case 4: s = " TIMES "; break;
      case 5: s = " DEV "; break;
      }
      print(s);
      return (R) s;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      _ret = " TEMP " + n.f1.f0.tokenImage;
      if (argu != null && (String)argu=="push") {
    	  print("CALL exp debug: " + (String)_ret);
//    	  System.out.println(_ret);
    	  tmp_exp.add((String)_ret);
      }
      return (R) _ret; 
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
	   print("IntegerLiteral:  " + n.f0.tokenImage);
      String _ret=null;
      n.f0.accept(this, argu);
      _ret = newTemp();
      System.out.println("MOVE " + _ret + n.f0.tokenImage);
      if (argu != null && (String)argu=="push") {
    	  print("CALL exp debug: " + (String)_ret);
//    	  System.out.println(_ret);
    	  tmp_exp.add((String)_ret);
      }
      return (R) _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      if (argu != null && (String)argu == "print") {
//    	  System.out.println();
    	  System.out.println(n.f0.tokenImage);
    	  return (R) "";
      }
      else
    	  return (R) n.f0.tokenImage;
//      return (R) "";
   }

}
