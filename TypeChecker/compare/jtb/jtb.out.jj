//
// Generated by JTB 1.2
//



PARSER_BEGIN(SubScheme)
import visitor.FreeVarFinder;
import syntaxtree.*;
import java.util.Vector;


public class SubScheme 
{
   public static void main(String args[])
   {
      SubScheme parser;
      System.out.println("Reading from standard input. . .");
      parser = new SubScheme(System.in);
      try
      {
         Node root = parser.Unit();
         System.out.println("Parsed successfully.");
         root.accept(new FreeVarFinder());
      }
      catch (ParseException e)
      {
         System.out.println(e.getMessage());
         System.out.println("Encountered errors during parse.");
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(SubScheme)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

TOKEN :
{
   <LAMBDA: "lambda">
   | <IDENT: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["_", "a"-"z", "A"-"Z"]>
   | <#DIGIT: ["0"-"9"]>
}

Unit Unit() :
{
   NodeList n0 = new NodeList();
   Exp n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   (
      n1=Exp()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new Unit(n0,n2); }
}

Exp Exp() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   Exp n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   Exp n21;
   NodeListOptional n22 = new NodeListOptional();
   Exp n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   Exp n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;

   {
   }
}
{
   (
      n2=<IDENT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      { n3 = new NodeSequence(8); }
      n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7="lambda" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      n9="(" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n3.addNode(n8); }
      (
         n12=<IDENT> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )*
      { n10.nodes.trimToSize(); }
      { n3.addNode(n10); }
      n14=")" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n3.addNode(n13); }
      n15=Exp()
      { n3.addNode(n15); }
      n17=")" { n16 = JTBToolkit.makeNodeToken(n17); }
      { n3.addNode(n16); }
      { n0 = new NodeChoice(n3, 1); }
   |
      LOOKAHEAD(2)
      { n18 = new NodeSequence(5); }
      n20="(" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      n21=Exp()
      { n18.addNode(n21); }
      (
         n23=Exp()
         { n22.addNode(n23); }
      )*
      { n22.nodes.trimToSize(); }
      { n18.addNode(n22); }
      n25=")" { n24 = JTBToolkit.makeNodeToken(n25); }
      { n18.addNode(n24); }
      { n0 = new NodeChoice(n18, 2); }
   |
      n27="0" { n26 = JTBToolkit.makeNodeToken(n27); }
      { n0 = new NodeChoice(n26, 3); }
   |
      { n28 = new NodeSequence(5); }
      n30="(" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n28.addNode(n29); }
      n32="+" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n28.addNode(n31); }
      n33=Exp()
      { n28.addNode(n33); }
      n35="1" { n34 = JTBToolkit.makeNodeToken(n35); }
      { n28.addNode(n34); }
      n37=")" { n36 = JTBToolkit.makeNodeToken(n37); }
      { n28.addNode(n36); }
      { n0 = new NodeChoice(n28, 4); }
   )
   
   { return new Exp(n0); }
}
