/***************************************************************************
 * subscheme.jj
 *
 * A tiny subset grammar of Scheme involving expressions.  This is the
 * plain, original grammar file for use with JTB.
 *
 * Author: Kevin Tao (taokr@cs.purdue.edu)
 ***************************************************************************/

/* RCS Information
 * $Id: subscheme.jj,v 1.3 1998/02/12 21:09:23 ktao Exp $
 *
 * $Log: subscheme.jj,v $
 * Revision 1.3  1998/02/12 21:09:23  ktao
 * -Updated for JavaCC 0.7.
 *
 * Revision 1.2  1997/11/16 21:01:52  ktao
 * -Added comments and RCS info
 *
 */

PARSER_BEGIN(SubScheme)
import visitor.FreeVarFinder;

public class SubScheme {

  public static void main(String args[]) {
    SubScheme parser;

    System.out.println("Reading from standard input. . .");
    parser = new SubScheme(System.in);

    try {
      Node root = parser.Unit();
      System.out.println("Parsed successfully.");
      root.accept(new FreeVarFinder());
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Encountered errors during parse.");
    }
  }

}
PARSER_END(SubScheme)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : {
   < LAMBDA : "lambda" >
|
   < IDENT  : <LETTER> (<LETTER>|<DIGIT>)* >
|
   < #LETTER: ["_","a"-"z","A"-"Z"] >
|
   < #DIGIT : ["0"-"9"] >
}

void Unit() : {}
{
   ( Exp() )+ <EOF>
}

void Exp() : {}
{
   <IDENT>
 |
   LOOKAHEAD(2) "(" "lambda" "(" ( <IDENT> )* ")" Exp() ")"
 |
   LOOKAHEAD(2) "(" Exp() ( Exp() )* ")"
 |
   "0"
 |
   "(" "+" Exp() "1" ")"
}
