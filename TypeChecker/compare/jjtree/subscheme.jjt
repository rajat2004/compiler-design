/***************************************************************************
 * subscheme.jjt
 *
 * A tiny subset grammar of Scheme involving expressions.  This is the
 * annotated grammar file for JJTree of our comparison between JJTree and
 * JTB.
 *
 * Author: Kevin Tao (taokr@cs.purdue.edu)
 ***************************************************************************/

/* RCS Information
 * $Id: subscheme.jjt,v 1.4 1998/02/12 21:09:10 ktao Exp $
 *
 * $Log: subscheme.jjt,v $
 * Revision 1.4  1998/02/12 21:09:10  ktao
 * -Updated for JJTree 0.3pre3 and JavaCC 0.7.
 *
 * Revision 1.3  1997/11/16 20:54:21  ktao
 * -Added RCS info, removed automatically-generated files from repository.
 *
 */

options {
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(SubScheme)
public class SubScheme {

  public static void main(String args[]) {
    SubScheme parser;

    System.out.println("Reading from standard input. . .");
    parser = new SubScheme(System.in);

    try {
      SimpleNode root = parser.Unit();
      System.out.println("Parsed successfully.");
//      root.dump("");
      root.jjtAccept(new FreeVarFinder(), null);
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Encountered errors during parse.");
    }
  }

}
PARSER_END(SubScheme)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : {
   < LAMBDA : "lambda" >
 |
   < IDENT  : <LETTER> (<LETTER>|<DIGIT>)* >
 |
   < #LETTER: ["_","a"-"z","A"-"Z"] >
 |
   < #DIGIT : ["0"-"9"] >
}

SimpleNode Unit() : {}
{
   ( Exp() )+ <EOF>
   { return jjtThis; }
}

void Exp() #void : {}
{
   Identifier()
 |
   LOOKAHEAD(2)
   ( "(" "lambda" "(" ( Identifier() )* ")" Exp() ")" ) #Declaration(>1)
 |
   LOOKAHEAD(2)
   ( "(" Exp() ( Exp() )* ")" ) #FunctionCall
 |
   "0" #ZeroConstant
 |
   ( "(" "+" Exp() "1" ")" ) #AddExp
}

void Identifier() :
{
   Token t;
}
{
   t=<IDENT>
   { jjtThis.setName(t.image); }
}
