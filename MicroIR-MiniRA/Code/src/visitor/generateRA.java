//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class generateRA<R,A> extends GJDepthFirst<R,A> {
	
	
	boolean debug = true;
	
	ArrayList<ProcedureClass> allProcedures = new ArrayList<ProcedureClass>(Liveliness.allProcedures);
	
	int lineNo = 0;
	String currlabel = "";
	ProcedureClass curr_proc = new ProcedureClass();
	int proc_index = 0;
	
	
	int stackLocation = 0;
	
	boolean arg = false;
	boolean moveStatement = false;
	
	
	
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            String tempRet = (String) e.nextElement().accept(this,argu);
            if(arg){
//            	String tmp = tempStack.pop();
            	if(_count < 4)
            		System.out.println("MOVE a"+ _count +" "+tempRet);
            	else{
            		System.out.println("PASSARG "+ (_count-3) +" "+ tempRet);
            	}
            }
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ) {
         String lbl = (String) n.node.accept(this,argu);
         System.out.println("\n" + lbl + " NOOP");
         return null;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      curr_proc = allProcedures.get(proc_index);
      System.out.println("MAIN [" + Integer.toString(curr_proc.no_args) + "] [" +  
    		  Integer.toString(curr_proc.stack_slots) + "] [" +Integer.toString(curr_proc.maxCallArgs) + "]");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      
      if (curr_proc.spilled) 
    	  System.out.println("// SPILLED\n\n");
      else
    	  System.out.println("// NOTSPILLED\n\n");
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      proc_index++;
      curr_proc = allProcedures.get(proc_index);
      System.out.println(curr_proc.label + " [" + Integer.toString(curr_proc.no_args) + "] [" +  
    		  Integer.toString(curr_proc.stack_slots) + "] [" +Integer.toString(curr_proc.maxCallArgs) + "]");
      
      
      // save Callee registers -s0 to s7
      if (curr_proc.label != "MAIN") {
    	  int calleeSave = curr_proc.no_args > 4 ? curr_proc.no_args-4 : 0;
          for( int i = 0; i < 8; i++, calleeSave++ ) // 8 is no of Stack registers
        	  System.out.println("ASTORE SPILLEDARG "+ Integer.toString(calleeSave) +" s"+ Integer.toString(i));
      }

      if (curr_proc.label != "MAIN") {
    	  for (TempLiveRange t : curr_proc.arguments) {
    		  if (t.argReg.contains("a")) {
    			  System.out.println("MOVE " + t.register + " " + t.argReg);
    		  }
    		  else {
    			  // Argument is on stack
    		  }
    	  }
      }
      
      
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      
      if (curr_proc.label != "MAIN") {
    	  int calleeSave = curr_proc.no_args > 4 ? curr_proc.no_args-4 : 0;
          for( int i = 0; i < 8; i++, calleeSave++ ) // 8 is no of Stack registers
        	  System.out.println("ALOAD "+ "s"+ Integer.toString(i) + " SPILLEDARG " + Integer.toString(calleeSave) );
      }
      
      System.out.println("END");
      
      if (curr_proc.spilled) 
    	  System.out.println("// SPILLED\n\n");
      else
    	  System.out.println("// NOTSPILLED\n\n");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tempRet = (String) n.f1.accept(this, argu);
      String lbl = (String) n.f2.accept(this, argu);
      System.out.println("CJUMP " + tempRet + " " + lbl);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lbl = (String) n.f1.accept(this, argu);
      System.out.println("JUMP " + lbl);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp1Ret = (String) n.f1.accept(this, argu);
      String intRet = (String) n.f2.accept(this, argu);
      String temp2Ret = (String) n.f3.accept(this, argu);
      System.out.println("HSTORE " + temp1Ret + " " + intRet + " " + temp2Ret);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp1Ret = (String) n.f1.accept(this, argu);
      String temp2Ret = (String) n.f2.accept(this, argu);
      String intRet = (String) n.f3.accept(this, argu);
      System.out.println("HLOAD " + temp1Ret + " " + temp2Ret + " " + intRet);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      TempLiveRange t = curr_proc.tempMap.get(n.f1.f1.f0.tokenImage);
      String expRet = (String) n.f2.accept(this, argu);
      
      moveStatement = true;

      if (t.spilled == true) {
    	  System.out.println("MOVE v0 " + expRet);
    	  System.out.println("ASTORE SPILLEDARG " + Integer.toString(t.stackLocation+8) + " v0");
      }
      else {
    	  String tempRet = (String) n.f1.accept(this, argu);
    	  System.out.println("MOVE " + tempRet + " " + expRet);
      }
      
      moveStatement = false;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String expReg = (String) n.f1.accept(this, argu);
      System.out.println("PRINT " + expReg);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String simExpRet = (String) n.f3.accept(this, argu);
      System.out.println("MOVE v0 " + simExpRet);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      // save Caller registers -t0 to t9
 
      int callerSave = curr_proc.stack_slots - 10;
      for(int i = 0; i < 10; i++, callerSave++ )
    	  System.out.println("ASTORE SPILLEDARG "+ Integer.toString(callerSave) +" t"+ Integer.toString(i));

      n.f0.accept(this, argu);
      String simExpRet = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      arg = true;
      n.f3.accept(this, argu);
      arg = false;
      n.f4.accept(this, argu);
      
      System.out.println("CALL " + simExpRet);
      

      callerSave = curr_proc.stack_slots - 10;
      for(int i = 0; i < 10; i++, callerSave++ )
    	  System.out.println("ALOAD "+ "t"+ Integer.toString(i)+ " SPILLEDARG " + Integer.toString(callerSave));
//      }
//      return _ret;
      return (R) "v0";
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String simExpRet = (String) n.f1.accept(this, argu);
      return (R)("HALLOCATE " + simExpRet);
      
//      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String) n.f0.accept(this, argu);
      String tempRet = (String) n.f1.accept(this, argu);
      String simExpRet = (String) n.f2.accept(this, argu);
      return (R) (op + " " + tempRet + " " + simExpRet);
//      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      switch(n.f0.which){
      	case 0: return (R) "LE";
      	case 1: return (R) "NE";
      	case 2: return (R) "PLUS";
      	case 3: return (R) "MINUS";
      	case 4: return (R) "TIMES";
      	case 5: return (R) "DIV";
      }
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      
      if (!moveStatement) {

    	  TempLiveRange t = curr_proc.tempMap.get(n.f1.f0.tokenImage);
    	  if (t.spilled) {
    		  System.out.println("ALOAD v0 SPILLEDARG " + Integer.toString(t.stackLocation + 8));
    		  return (R)"v0";
    	  }
    	  else {

    		  if (!t.register.equals(""))
    			  return (R)t.register;
    		  else {
    			  if (curr_proc.argsMap.containsKey(n.f1.f0.tokenImage)) {
    		    	  TempLiveRange curr_tmp = curr_proc.argsMap.get(n.f1.f0.tokenImage);
    		    	  if (curr_tmp.register.equals("")) {
    		    		  // It's in stack
    		    		  System.out.println("ALOAD v1 SPILLEDARG " + Integer.toString(curr_tmp.stackLocation));
    		    		  return (R) "v1";
    		    	  }
    		    	  else
    		    		  return (R) curr_tmp.register;

    		      }
    		      else
    		    	  // Normal temporary
    		    	  return (R) curr_proc.tempMap.get(n.f1.f0.tokenImage).register;

    		  }
    	  }
      }
      else {
    	  if (curr_proc.argsMap.containsKey(n.f1.f0.tokenImage)) {
    		  TempLiveRange curr_tmp = curr_proc.argsMap.get(n.f1.f0.tokenImage);
	    	  if (curr_tmp.register.equals("")) {
	    		  // It's in stack
	    		  System.out.println("ALOAD v1 SPILLEDARG " + Integer.toString(curr_tmp.stackLocation));
	    		  return (R) "v1";
	    	  }
	    	  else
	    		  return (R) curr_tmp.register;
	      }
    	  
	      else
	    	  // Normal temporary
	    	  return (R) curr_proc.tempMap.get(n.f1.f0.tokenImage).register;
      
      }
      

   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      return _ret;
      return (R) n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
   }

}
