//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


/**
 * IR Code generator
 */
public class IR_generator<R,A> extends GJDepthFirst<R,A> {
	int temp_count = 20;
	int label_cnt = 0;
	
	public HashMap<String, class_info> classhm = new HashMap<String, class_info>();
	
	boolean debug = false;
	String curr_class;
	
	boolean IdAsaType;
	boolean in_mthd;
	int param_count;
	String class_var_lval;
	boolean inHeap;
	
	HashMap<String, Obj> local_scope = new HashMap<String, Obj>();
	
	HashMap<String, Obj> class_scope = new HashMap<String, Obj>();
	
	public String newTemp() {
		temp_count++;
		return Integer.toString(temp_count);
	}
	
	public String newLabel(){
		label_cnt++;
		return "L" + Integer.toString(label_cnt-1);
	}
	
	void print(String s) {
		if (debug)
			System.out.println(s);
	}
	
	String curr_type;
   
   public void add_class_var(String id, String type, String cname){
	   Obj o = new Obj();
	   o.type = type;
	   o.index = classhm.get(cname).vars.get(cname+"_"+id).index;
	   class_scope.put(id, o);
   }

   public void add_local_var(String id, String type, int i){
	   Obj o =  new Obj();
	   o.type = type;
	   o.index = i;
	   local_scope.put(id, o);
   }
	

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
	   R _ret = null;
	   n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return (R)_ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
	   R _ret = null;
	   System.out.println("MAIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      
      System.out.println("END\n\n");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {	   
	   curr_class = n.f1.f0.tokenImage;
	   
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      curr_class = null;
      class_scope.clear();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
	   
      R _ret=null;
      IdAsaType = true;
      String type = (String) n.f0.accept(this, argu);
      IdAsaType = false;
      
      if (in_mthd) {
    	  add_local_var(n.f1.f0.tokenImage, type, Integer.parseInt(newTemp()));
      } else {
    	  add_class_var(n.f1.f0.tokenImage, type, curr_class);
      }
      

      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
	   in_mthd = true;
	   param_count = 0;
	   
	   String _out = "\n\n\n"+curr_class+"_"+ n.f2.f0.tokenImage + " [";
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String num = (String) n.f4.accept(this, argu);
      
      if (num == null) {
    	  _out += Integer.toString(1);
      } else {
    	  _out += num;
      }
      _out += "]\n BEGIN ";
      System.out.println(_out);
      
      
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      
      System.out.println(" RETURN ");
      n.f9.accept(this, argu);
      String ex = (String) n.f10.accept(this, argu);
      if (ex != null)
    	  System.out.println(ex);
      
      System.out.println("END");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      
      local_scope.clear();
      in_mthd = false;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return (R) Integer.toString(param_count+1);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
	   param_count++;
      R _ret=null;
      String type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      add_local_var(n.f1.f0.tokenImage, type, param_count);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      IdAsaType = true;
      String ret1 = (String) n.f0.accept(this, argu);
      curr_type = ret1;
      IdAsaType = false;
      return (R) ret1;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) "int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
	   print("Begin --assignment impl");
	   
	   inHeap = false;
	   String s = (String) n.f0.accept(this, argu);
//	   if (s != null)
//		   System.out.println(s);
	      
	   if(inHeap){
		   System.out.println(" HSTORE " + class_var_lval + " 0 ");
		   String ex2 = (String) n.f2.accept(this, argu);
		   if (ex2 != null)
			   System.out.println(ex2);
	   }
	   else{
//		   if (s != null)
//			   System.out.println(s);
		   System.out.println( " MOVE " + s + " ");
		   String ex2 = (String) n.f2.accept(this, argu);
		   if (ex2 != null)
			   System.out.println(ex2);
	   }
	   
      R _ret=null;
      n.f1.accept(this, argu);
      n.f3.accept(this, argu);
      
      print("End --assignment impl");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
	   print("Array Assignment...........");
	   inHeap = false;
	   String arr_id = (String) n.f0.accept(this, argu);
	   
	   String arr_base = newTemp();
	   String length = newTemp();
	   String offset = newTemp();
	   
	   String oklabel = newLabel();
	   
	   if (inHeap) 
		   System.out.println("  HLOAD TEMP "+ arr_base + " " + class_var_lval + " 0");
	   else
		   System.out.println("  MOVE TEMP "+ arr_base + " " + arr_id + " 0");
	   
	   System.out.println("  HSTORE PLUS TEMP " + arr_base);
	   
	   // Again length, offset :-(
	   System.out.println(" BEGIN");

	   System.out.println("MOVE TEMP " + offset + " TIMES " + "4 ");
	   String arr_index = (String) n.f2.accept(this, argu);
	   if (arr_index != null)
		   System.out.println(arr_index);
	   
	   System.out.println(" CJUMP MINUS 1 LE TEMP " + offset + " TIMES 4 MINUS ");
	   // Length
	   System.out.println("BEGIN\n HLOAD TEMP " + length + " TEMP " + arr_base + " 0 RETURN TEMP " + length + " \nEND 1 "); 
	   System.out.println(oklabel);
	   
	   System.out.println("ERROR");
	   System.out.println(oklabel + " NOOP");
	   
	   System.out.println("RETURN PLUS TEMP "+ offset + " 4");
	   System.out.println("END 0");
	   
	   
	   String ex2 = (String) n.f5.accept(this, argu);
	   if (ex2 != null)
		   System.out.println(ex2);
	   
	   
      R _ret=null;
//      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      print("End ArrayAssignment................");
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
	   String falseLabel = newLabel();
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      System.out.println("CJUMP ");
      String ex = (String) n.f2.accept(this, argu);
      if (ex != null)
    	  System.out.println(ex);
      System.out.println(falseLabel);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      System.out.println(falseLabel + "NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
	   String falseLabel = newLabel();
	   String end = newLabel();
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      System.out.println("CJUMP ");
      String ex = (String) n.f2.accept(this, argu);
      if (ex != null)
    	  System.out.println(ex);
      
      System.out.println(falseLabel);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(" JUMP " + end);
      
      
      System.out.println(falseLabel + " ");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      System.out.println(end + " NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      String beginLoop = newLabel();
      String endLoop = newLabel();
      
      System.out.println(beginLoop + " NOOP");
      System.out.println("CJUMP ");
      String exp = (String) n.f2.accept(this, argu);
      if (exp != null)
    	  System.out.println(exp);
      System.out.println(endLoop);
      n.f3.accept(this, argu);
      
      n.f4.accept(this, argu);
      System.out.println("JUMP " + beginLoop);
      System.out.println(endLoop + " NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
	   R _ret = null;
	   System.out.println("\t PRINT ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
	   R _ret = null;
	   _ret = n.f0.accept(this, argu);
	   return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
	   print("Begin --And Imple");
	   String falseLabel = newLabel();
	   String trueLabel = newLabel();
       String result = newTemp();
       
       System.out.println("BEGIN");
       System.out.println("CJUMP ");
       String ex1 = (String) n.f0.accept(this, argu);
       if (ex1 != null)
    	   System.out.println(ex1);
       System.out.println(falseLabel);
       
       System.out.println("CJUMP ");
       String ex2 = (String) n.f2.accept(this, argu);
       if (ex2 != null)
    	   System.out.println(ex2);
       System.out.println(falseLabel);
       
       // Return true
       System.out.println(" MOVE TEMP " + result + " 1");
       System.out.println("JUMP " + trueLabel);
       
       // False
       System.out.println(falseLabel + " MOVE TEMP " + result + " 0");
       
       System.out.println(trueLabel + " NOOP");
	   System.out.println("RETURN TEMP " + result);
	   
	   System.out.println("END");
	   R _ret=null;
      n.f1.accept(this, argu);
      print("End --And impl");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
	   print("Begin --Or Imple");
	   String falseLabel = newLabel();
	   String trueLabel = newLabel();
       String result = newTemp();
       
       System.out.println("BEGIN");
       // Return true if ex1 is true, for checking that need to invert shit
       System.out.println("CJUMP MINUS 1 ");
       String ex1 = (String) n.f0.accept(this, argu);
       if (ex1 != null)
    	   System.out.println(ex1);
       System.out.println(trueLabel);
       
       System.out.println("CJUMP MINUS 1 ");
       String ex2 = (String) n.f2.accept(this, argu);
       if (ex2 != null)
    	   System.out.println(ex2);
       System.out.println(trueLabel);
       
       // Return false
       System.out.println("MOVE TEMP " + result + " 0");
       System.out.println("JUMP " + falseLabel);
       
       // True
       System.out.println(trueLabel + " MOVE TEMP " + result + " 1");
       
       System.out.println(falseLabel + " NOOP");
	   System.out.println("RETURN TEMP " + result);
	   
	   System.out.println("END");
	   R _ret=null;
      n.f1.accept(this, argu);
      print("End --Or impl");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
	   R _ret = null;
	   System.out.println(" LE ");
	   String ex1 = (String) n.f0.accept(this, argu);
	   if (ex1 != null)
		   System.out.println(ex1);
	   
      n.f1.accept(this, argu);
      
      String ex2 = (String) n.f2.accept(this, argu);
      if (ex2 != null)
		   System.out.println(ex2);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
	   R _ret = null;
	   System.out.println(" NE ");
	   String ex1 = (String) n.f0.accept(this, argu);
	   if (ex1 != null)
		   System.out.println(ex1);
	   
       n.f1.accept(this, argu);
       String ex2 = (String) n.f2.accept(this, argu);
       if (ex2 != null)
		   System.out.println(ex2);
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
	   R _ret = null;
	   System.out.println(" PLUS ");
	   String ex1 = (String) n.f0.accept(this, argu);
	   if (ex1 != null)
		   System.out.println(ex1);
	   
       n.f1.accept(this, argu);
       String ex2 = (String) n.f2.accept(this, argu);
       if (ex2 != null)
		   System.out.println(ex2);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
	   R _ret = null;
	   System.out.println(" MINUS ");
	   String ex1 = (String) n.f0.accept(this, argu);
	   if (ex1 != null)
		   System.out.println(ex1);
	   
       n.f1.accept(this, argu);
       String ex2 = (String) n.f2.accept(this, argu);
       if (ex2 != null)
		   System.out.println(ex2);
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
	   R _ret = null;
	   System.out.println(" TIMES ");
	   String ex1 = (String) n.f0.accept(this, argu);
	   if (ex1 != null)
		   System.out.println(ex1);
	   
       n.f1.accept(this, argu);
       String ex2 = (String) n.f2.accept(this, argu);
       if (ex2 != null)
		   System.out.println(ex2);
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
	   R _ret = null;
	   System.out.println(" DIV ");
	   String ex1 = (String) n.f0.accept(this, argu);
	   if (ex1 != null)
		   System.out.println(ex1);
	   
       n.f1.accept(this, argu);
       String ex2 = (String) n.f2.accept(this, argu);
       if (ex2 != null)
		   System.out.println(ex2);
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
	   print("ArrayLookup Begin..............");
	   System.out.println(" BEGIN ");
	      
	   String array = newTemp();
	   String result = newTemp();
	   String offset = newTemp();
	   String totlength = newTemp();
	      
	   String label = newLabel();
	      
	   System.out.println( "   MOVE TEMP " + array);
	   String arr_id = (String) n.f0.accept(this, argu);
	   if (arr_id != null)
		   System.out.println(arr_id);
	   
	   System.out.println(" HLOAD TEMP " + result + " PLUS TEMP " + array + " PLUS ");
	   System.out.println(" BEGIN");
	   // Check if this is correct!
	   System.out.println("MOVE TEMP " + offset + " TIMES " + "4 ");
	   String arr_index = (String) n.f2.accept(this, argu);
	   if (arr_index != null)
		   System.out.println(arr_index);
	   
	   System.out.println(" HLOAD TEMP " + totlength + " TEMP " + array + " 0 ");
	   System.out.println(" CJUMP MINUS 1 LE TEMP " + offset + " TIMES MINUS TEMP " + totlength + " 1 4 " + label + " ");
	   System.out.println(" ERROR ");
	   System.out.println(label + " NOOP RETURN TEMP " + offset);
	   System.out.println("   END 4 0 RETURN TEMP " + result);
	   System.out.println(" END ");
      R _ret=null;
      n.f1.accept(this, argu);
      n.f3.accept(this, argu);
      
      print("ArrayLookup end..........");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
	   System.out.println("BEGIN");
	  String array = newTemp();
	  String result = newTemp();
	  
	  
	  System.out.println(" MOVE TEMP " + array);
	  String arr_id = (String) n.f0.accept(this, argu);
	   if (arr_id != null)
		   System.out.println(arr_id);
	   
	  System.out.println(" HLOAD TEMP " + result + " TEMP " + array + " 0 ");
	  System.out.println(" RETURN TEMP " + result + " \nEND ");
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
	   R _ret=null;
//	   System.out.println("Reached MessageSend: " + n.f2.f0.tokenImage);
	   print("Starting --MessageSend impl");
	   System.out.println("CALL BEGIN");
	   String base = newTemp();
	   String obj = newTemp();
	   String n1 = newTemp();
	   
	   print("New obj in MessageSend: " + obj);
       
	   
	   System.out.println("MOVE TEMP "+ obj + " ");
      String ret1 = (String) n.f0.accept(this, argu);
      if (ret1 != null)
    	  System.out.println(ret1);
      
      System.out.println("HLOAD TEMP " + base + " TEMP " + obj + " 0 ");
      print(curr_class);
      System.out.println("HLOAD TEMP " + n1 + " TEMP " + base + " " +
    		  	Integer.toString(classhm.get(curr_type).methods.get(n.f2.f0.tokenImage).index * 4) );
      
      System.out.println("RETURN TEMP "+n1);
      System.out.println("END ( TEMP " + obj + " " );
      n.f4.accept(this, argu);
      System.out.println(")");
      
      print("End --MessageSend Impl");

      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String exp = (String) n.f0.accept(this, argu);
      if (exp != null)
    	  System.out.println(exp);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String) n.f1.accept(this, argu);
      if (exp != null)
    	  System.out.println(exp);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
	   R _ret = null;
	   _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
	   R _ret = null;
      n.f0.accept(this, argu);
      System.out.println(n.f0.tokenImage + " ");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
//      String _ret="1";
	   R _ret = null;
      n.f0.accept(this, argu);
      System.out.println("1 ");
      return (R)_ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
//      String _ret="0";
	   R _ret = null;
      n.f0.accept(this, argu);
      System.out.println("0 ");
      return (R)_ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
	   String _ret=null;
	   if(IdAsaType){
		   curr_type = n.f0.tokenImage;
		   return (R) n.f0.tokenImage;
	   }
	   else{
		   if (class_scope.containsKey(n.f0.tokenImage)) {
			   Obj o = class_scope.get(n.f0.tokenImage);
			   curr_type = o.type;
			   print("Id is class var: " + n.f0.tokenImage);
			   inHeap = true;
			   String res = newTemp();
			   class_var_lval = " BEGIN\n MOVE TEMP " + res + " PLUS TEMP 0 PLUS 4 TIMES 4 " + o.index + " RETURN TEMP " + res + " \nEND ";
			   String ret_temp = newTemp();

			   _ret = " BEGIN\n";
			   _ret += " HLOAD TEMP " + ret_temp + " BEGIN\n";
			   _ret += " MOVE TEMP " + res + " PLUS TEMP 0 PLUS 4 TIMES 4 " +
	    				  o.index + " RETURN TEMP " + res;
			   _ret += "\nEND 0 RETURN TEMP " + ret_temp;
			   _ret += " END\n ";
			   return (R)_ret;
		   }
		   else if (local_scope.containsKey(n.f0.tokenImage)){
			   Obj o = local_scope.get(n.f0.tokenImage);
			   curr_type = o.type;
			   print("Normal Id: " + n.f0.tokenImage);
			   inHeap = false;
			   return (R) (" TEMP " + o.index + " ");
		   }
	   }
	   return (R) _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      curr_type = curr_class;
      n.f0.accept(this, argu);
      return (R) " TEMP 0 ";
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
	   print("Array Allocation-new.....");
	   System.out.println(" BEGIN ");
	      
	   String base_addr = newTemp();
	   String ind = newTemp();
	   String expr = newTemp();
	   
	   System.out.println(" MOVE TEMP " + expr);
	   String exp = (String) n.f3.accept(this, argu);
	   if (exp != null)
		   System.out.println(exp);
	   
	   System.out.println(" MOVE TEMP " + base_addr + " HALLOCATE TIMES 4 PLUS 1 TEMP " + expr);
	   System.out.println(" MOVE TEMP " + ind + " 4 ");
	      
	   String start = newLabel();
	   String end = newLabel();
	   
	   // Make all entries 0
	   System.out.println(start + " CJUMP LE TEMP " + ind + " MINUS TIMES PLUS TEMP " + expr + " 1 4 1 " + end);
	   System.out.println(" HSTORE PLUS TEMP " + base_addr + " TEMP " + ind + " 0 0 ");
	   System.out.println(" MOVE TEMP " + ind + " PLUS TEMP " + ind + " 4 ");
	   System.out.println(" JUMP " + start);
	   System.out.println(end + " HSTORE TEMP " + base_addr + " 0 TEMP " + expr);
	   System.out.println(" RETURN TEMP " + base_addr);
	   System.out.println("END ");

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return null;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
//	   System.out.println("Reached new: " + n.f1.f0.tokenImage);
	   curr_type = n.f1.f0.tokenImage;
	   print("Starting ---new implementation");
	   System.out.println(" BEGIN ");
	   
	   class_info clss = classhm.get(n.f1.f0.tokenImage);
	   int meth_num = clss.count_method;
	   int var_num = clss.count_var;
	   
	   String meth_arr = newTemp();
	   System.out.println("\tMOVE TEMP "+ meth_arr + 
			   " HALLOCATE " + Integer.toString(meth_num*4));
	   
	   String var_arr = newTemp();
	   System.out.println("\tMOVE TEMP "+ var_arr + 
			   " HALLOCATE " + Integer.toString(var_num*4 + 4));
	   
//	   String ret = newTemp();
	   
	// Make table entries
	   for (Map.Entry mthd : clss.methods.entrySet() ) {
		   String mthd_nm = (String) mthd.getKey();
		   Obj o_ = (Obj) mthd.getValue();
		   print(mthd_nm);
		   System.out.println(" HSTORE TEMP " + meth_arr + " " + Integer.toString(o_.index*4) + " " + 
				   				curr_type+"_" + mthd_nm + " ");
	   }
	   System.out.println(" HSTORE TEMP "+var_arr + " 0 TEMP " + meth_arr);
	   
	   System.out.println("RETURN");
	   System.out.println("TEMP " + var_arr);
	   System.out.println("END");
	     
	   print("End --new impl");
	  
	   
      R _ret=null;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R) curr_type;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String negres = newTemp();
      System.out.println("BEGIN");
      System.out.println("MOVE TEMP " + negres + "MINUS 1 ");
      String exp = (String) n.f1.accept(this, argu);
      if (exp != null)
    	  System.out.println(exp);
      System.out.println("RETURN TEMP " + negres);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
